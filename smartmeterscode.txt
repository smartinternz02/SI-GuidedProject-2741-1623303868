mport time 
import says
 import ibmiotf.application
 import ibmiotf.device 
import random 
import json #Provide your IBM Watson Device Credentials 
organization = "hh8qzq" 
deviceType = "iotdevice" 
deviceId = "7777" 
authMethod = "token" 
authToken = "7989321384" 
# Initialize the device client.
 V=0
 C=0 
Def myCommandCallback(cmd): 
        print("Command received: %s" % cmd.data['command'])
         if cmd.data['command']==light on:  
               print("LIGHT ON IS RECEIVED")
        elif cmd.data['command']=='lightoff': 
                print("LIGHT OFF IS RECEIVED") 
if cmd.command == "setInterval":   
              if 'interval' not in cmd.data: 
                        print("Error - command is missing required information: 'interval'")                 else:                         interval = cmd.data['interval']  
       elif cmd.command == "print":     
            if 'message' not in cmd.data:  
                       print("Error - command is missing required information: 'message'")                 else:   
                      print(cmd.data['message']) try: deviceOptions = {"org": organization, "type": deviceType, "id": deviceId, "auth-method": authMethod, "auth-token": authToken}
 deviceCli = ibmiotf.device.Client(deviceOptions) 

except Exception as e:

 print("Caught exception connecting device: %s" % str(e))
 sys.exit() 
# Connect and send a data point "hello" with value "world" into the cloud as an event of type "greeting" 10 times
 deviceCli.connect() 
while True: 
        V=23  
       C=45         #Send Temperature and Humidity to IBM Watson 
        data = {"d":{ 'VOLTAGE' : V, 'CURRENT': C }}        
 #print data         
De f myOnPublishCallback(): 
            print ("VOLTAGE = %s C" % V, "CURRENT = %s %%" % C, "to IBM Watson") 
        success = deviceCli.publishEvent("Data", "json", data, qos=0, on_publish=myOnPublishCallback)        
 if not success:
             print("Not connected to IoTF") 
        time.sleep(1)
       deviceCli.commandCallback = myCommandCallback 
# Disconnect the device and application from the cloudoutages (blackouts) 
deviceCli.disconnect()
